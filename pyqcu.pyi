import ctypes
def testWilsonDslashQcu(fermion_out:ctypes.c_void_p, fermion_in:ctypes.c_void_p,
              gauge:ctypes.c_void_p, params: ctypes.c_void_p, argv: ctypes.c_void_p) -> None: ...
def applyWilsonDslashQcu(fermion_out:ctypes.c_void_p, fermion_in:ctypes.c_void_p, gauge:ctypes.c_void_p,
                  params: ctypes.c_void_p, argv: ctypes.c_void_p) -> None: ...
def testCloverDslashQcu(fermion_out:ctypes.c_void_p, fermion_in:ctypes.c_void_p,
                    gauge:ctypes.c_void_p, params: ctypes.c_void_p, argv: ctypes.c_void_p) -> None: ...
def applyCloverDslashQcu(fermion_out:ctypes.c_void_p, fermion_in:ctypes.c_void_p, gauge:ctypes.c_void_p,
                  params: ctypes.c_void_p, argv: ctypes.c_void_p) -> None: ...
def applyBistabCgQcu(fermion_out:ctypes.c_void_p, fermion_in:ctypes.c_void_p, gauge:ctypes.c_void_p,
                    params: ctypes.c_void_p, argv: ctypes.c_void_p) -> None: ...
def applyCgQcu(fermion_out:ctypes.c_void_p, fermion_in:ctypes.c_void_p, gauge:ctypes.c_void_p,
                    params: ctypes.c_void_p, argv: ctypes.c_void_p) -> None: ...
def applyGmresIrQcu(fermion_out:ctypes.c_void_p, fermion_in:ctypes.c_void_p, gauge:ctypes.c_void_p,
                    params: ctypes.c_void_p, argv: ctypes.c_void_p) -> None: ...